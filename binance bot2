import os
import logging
import time
import numpy as np
import pandas as pd
import threading
import asyncio
import websockets
import requests
import torch
import torch.nn as nn
import torch.optim as optim
from dotenv import load_dotenv
from binance.client import Client as BinanceClient
from kucoin.client import Client as KucoinClient
from okx import MarketData, Trade
from web3 import Web3
from google.colab import auth
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload

# 📌 API Anahtarlarını Yükle
load_dotenv()
API_KEYS = {
    "binance": {"key": os.getenv("BINANCE_API_KEY"), "secret": os.getenv("BINANCE_API_SECRET")},
    "kucoin": {"key": os.getenv("KUCOIN_API_KEY"), "secret": os.getenv("KUCOIN_API_SECRET")},
    "okx": {"key": os.getenv("OKX_API_KEY"), "secret": os.getenv("OKX_API_SECRET")},
    "alchemy": os.getenv("ALCHEMY_ETH_API_KEY"),
    "infura": os.getenv("INFURA_API_KEY"),
    "the_graph": os.getenv("THE_GRAPH_API_URL"),
    "telegram": {"token": os.getenv("TELEGRAM_BOT_TOKEN"), "chat_id": os.getenv("TELEGRAM_CHAT_ID")}
}

# 📌 Binance, KuCoin, OKX Bağlantıları
clients = {
    "binance": BinanceClient(API_KEYS["binance"]["key"], API_KEYS["binance"]["secret"]),
    "kucoin": KucoinClient(API_KEYS["kucoin"]["key"], API_KEYS["kucoin"]["secret"]),
    "okx_market": MarketData(API_KEYS["okx"]["key"], API_KEYS["okx"]["secret"]),
    "okx_trade": Trade(API_KEYS["okx"]["key"], API_KEYS["okx"]["secret"]),
}

# 📌 Blockchain API Bağlantıları
w3_alchemy = Web3(Web3.HTTPProvider(f"https://eth-mainnet.g.alchemy.com/v2/{API_KEYS['alchemy']}"))
w3_infura = Web3(Web3.HTTPProvider(f"https://mainnet.infura.io/v3/{API_KEYS['infura']}"))

# 📌 Google Drive Bağlantısı
auth.authenticate_user()
drive_service = build('drive', 'v3')

# 📌 **Blockchain API Failover (Alchemy & Infura)**
def get_blockchain_data():
    for provider, w3 in [("Alchemy", w3_alchemy), ("Infura", w3_infura)]:
        if w3.is_connected():
            logging.info(f"✅ {provider} API'den blok verisi çekiliyor...")
            return w3.eth.get_block("latest")
    logging.error("❌ Hem Alchemy hem de Infura API başarısız!")
    return None

# 📌 **The Graph API ile On-Chain Analiz**
def get_graph_data():
    query = """
    {
      transfers(first: 5) {
        id
        from
        to
        value
      }
    }
    """
    response = requests.post(API_KEYS["the_graph"], json={"query": query})
    return response.json() if response.status_code == 200 else None

# 📌 **AI Modeli (LSTM)**
class LSTMPredictor(nn.Module):
    def __init__(self, input_size=1, hidden_layer_size=50, output_size=1):
        super().__init__()
        self.lstm = nn.LSTM(input_size, hidden_layer_size, batch_first=True)
        self.linear = nn.Linear(hidden_layer_size, output_size)

    def forward(self, x):
        lstm_out, _ = self.lstm(x)
        return self.linear(lstm_out[:, -1])

# 📌 **AI Modelini Eğitme**
def train_ai_model():
    data = pd.read_csv("market_data.csv")
    X = torch.tensor(data['feature'].values, dtype=torch.float32)
    y = torch.tensor(data['target'].values, dtype=torch.float32)

    model = LSTMPredictor()
    optimizer = optim.Adam(model.parameters(), lr=0.001)
    loss_function = nn.MSELoss()

    for _ in range(10):  
        optimizer.zero_grad()
        loss = loss_function(model(X), y)
        loss.backward()
        optimizer.step()

    torch.save(model.state_dict(), "ai_model.pth")
    logging.info("✅ AI Modeli Güncellendi!")
    return model

# 📌 **WebSocket Bağlantısı**
async def websocket_listener(exchange, symbol):
    uris = {
        "binance": f"wss://stream.binance.com:9443/ws/{symbol.lower()}@trade",
        "kucoin": f"wss://ws-api.kucoin.com/endpoint",
        "okx": f"wss://ws.okx.com:8443/ws/v5/public"
    }
    uri = uris.get(exchange, "")

    while True:
        try:
            async with websockets.connect(uri) as websocket:
                while True:
                    logging.info(f"📡 {exchange.upper()} | {symbol}: {await websocket.recv()}")
        except Exception as e:
            logging.error(f"WebSocket hatası: {e}, 5 saniye sonra yeniden bağlanıyor...")
            await asyncio.sleep(5)

# 📌 **Telegram Uyarı Sistemi**
def send_telegram_alert(message):
    url = f"https://api.telegram.org/bot{API_KEYS['telegram']['token']}/sendMessage"
    data = {"chat_id": API_KEYS["telegram"]["chat_id"], "text": message}
    requests.post(url, data=data)

# 📌 **Google Drive'a Veri Kaydetme**
def save_to_drive(content, filename="trading_data.txt"):
    filepath = f"/content/{filename}"
    with open(filepath, "w") as file:
        file.write(content)
    file_metadata = {'name': filename, 'parents': ['binance pump']}
    media = MediaFileUpload(filepath, mimetype='text/plain')
    drive_service.files().create(body=file_metadata, media_body=media, fields='id').execute()

# 📌 **Çoklu İşlem Açma (KuCoin & OKX)**
def send_order(symbol, side, quantity, price, exchange):
    api_url = "https://api.kucoin.com/api/v1/orders" if exchange == "kucoin" else "https://www.okx.com/api/v5/trade/order"
    response = requests.post(api_url, json={"symbol": symbol, "side": side, "quantity": quantity, "price": price})
    return response.json()

# 📌 **Ana Çalıştırma**
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)

    symbols = ["BTCUSDT", "ETHUSDT"]
    for symbol in symbols:
        threading.Thread(target=lambda: asyncio.run(websocket_listener("binance", symbol)), daemon=True).start()
        threading.Thread(target=lambda: asyncio.run(websocket_listener("kucoin", symbol)), daemon=True).start()
        threading.Thread(target=lambda: asyncio.run(websocket_listener("okx", symbol)), daemon=True).start()

    while True:
        block_data = get_blockchain_data()
        graph_data = get_graph_data()
        
        if block_data:
            logging.info(f"✅ Blok No: {block_data['number']}, İşlemler: {len(block_data['transactions'])}")

        if graph_data:
            logging.info(f"✅ The Graph API Verileri: {graph_data}")

        time.sleep(60)  
